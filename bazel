#! /bin/bash
set -eo pipefail

# This file goes into the //tools/bazel of the top-level repository.

function find_files() {
  local ff_filenames=("$@")  # Accept ff_filenames as arguments
  local current_dir="$PWD"

  while [[ "$current_dir" != "/" ]]; do
    for filename in "${ff_filenames[@]}"; do
      if [[ -f "$current_dir/$filename" ]]; then
        echo "$current_dir"  # Return the directory name
        return 0  # Success
      fi
    done
    current_dir=$(dirname "$current_dir")
  done

  return 1  # Failure (files not found)
}

# Move PWD to the repository root.
readonly filenames=("WORKSPACE", "WORKSPACE.bazel", "MODULE", "MODULE.bazel")
readonly _detected="$(find_files ${filenames[@]})"
if [[ "${_detected}" != "" ]]; then
    cd "${_detected}"
fi

# Cache directory for bazel is based on $USER.
readonly _output_user_root="${HOME}/.cache/bazel/_bazel_${USER}"
readonly _nix_install="${_output_user_root}/nix_install"
readonly _scripts_dir="${_nix_install}/scripts_dir"

export BAZEL_REAL
export NIX_PORTABLE_BINARY="${_scripts_dir}/nix-portable"

readonly _wrapper="${_scripts_dir}/bazel_wrapper"

if [[ ! -x "${_wrapper}" ]]; then
    echo "=== bazel wrapper for nix not present, installing it now"
    readonly _tools_dir="${0%/*}"

    readonly _config="${_tools_dir}/bazel_local_nix_config.sh"
    (
        if [[ -x "${_tools_dir}/bazel_local_nix_config.sh" ]]; then
            source "${_config}"
        fi
        "${BAZEL_REAL}" --max_idle_secs=1 run @bazel_local_nix//:install -- noscript
        echo "=== bazel wrapper should now be installed, proceeding"
    )
fi

"${_wrapper}" "${@}"

